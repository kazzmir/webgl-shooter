//kage:unit pixels

package main

var Center vec2
var OuterRadius float
var InnerRadius float

func Fragment(destPosition vec4, srcPosition vec2, color vec4) vec4 {

    dist := distance(Center, destPosition.xy)

    current := imageSrc0UnsafeAt(srcPosition)

    d1 := 1 - smoothstep(InnerRadius, OuterRadius, dist)
    d2 := 1 - step(InnerRadius, dist)
    
    return current * vec4(1, 1, 1, d1 - d2)
    
    // d2 := 1 - step(InnerRadius, dist)
    // return current * vec4(1, 1, 1, d2)

    // dx := 1 - smoothstep(InnerRadius, OuterRadius, dist)
    // dx := dist / 50
    // return current * vec4(1, 1, 1, dx)

    /* try to make pixels near an edge somewhat visible. the pixel is near an edge if
     *   the alpha value of the pixel is close to 0
     *   the average alpha value of nearby pixels is small but non-zero
     */
    /*
    // how bright to make pixels near an edge
    antialias := 0.4
    val1 := step(0.2, average)
    partial_color := Color * vec4(1, 1, 1, val1 * antialias) * vec4(1, 1, 1, step(0.9, 1-current.a))
    // partial_color := vec4(0)

    / * a pixel is near an edge if the average alpha of nearby pixels is somewhat low * /
    out_color := Color * vec4(step(0.1, 1-average)) * vec4(current.a)
    // out_color := vec4(0)
    return out_color + partial_color
    */

    // red := vec4(abs(sin(Red) / 3), 0, 0, 0)
    // return imageSrc0UnsafeAt(srcPosition) + red
    // return red.rgba
}
